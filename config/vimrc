" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

filetype off                  " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NeoBundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Note Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
 set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Command
NeoBundle 'godlygeek/tabular'
NeoBundle 'tpope/vim-surround'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'gerw/vim-HiLinkTrace'

" langs
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'moll/vim-node'
NeoBundle 'elzr/vim-json'
NeoBundle 'othree/html5.vim'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'cakebaker/scss-syntax.vim'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'rust-lang/rust.vim'

" Completion
NeoBundle 'mattn/emmet-vim'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'Valloric/YouCompleteMe', {
  \"build": {
  \   "others": './install.sh'
  \}}
NeoBundleLazy 'marijnh/tern_for_vim', {
  \'autoload': {
  \'filetypes': ['javascript']
  \},
  \'build': {
  \  'others': 'npm install'
  \}}
NeoBundle 'SirVer/ultisnips'
" NeoBundle 'honza/vim-snippets'
" NeoBundle '1995eaton/vim-better-javascript-completion'

" UI
NeoBundle 'lisposter/vim-blackboard'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'bling/vim-airline'

" Code Display
NeoBundle 'Yggdroot/indentLine'
NeoBundle 'ap/vim-css-color'


" Integrations
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'scrooloose/syntastic'
" NeoBundle 'Shougo/vimshell.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'editorconfig/editorconfig-vim'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if neobundle#tap('emmet-vim') "{{{
  let g:user_emmet_leader_key = '<C-E>'

  call neobundle#untap()
endif "}}}

if neobundle#tap('vim-markdown') "{{{
  let g:vim_markdown_folding_disabled=1

  call neobundle#untap()
endif "}}}

if neobundle#tap('nerdtree') "{{{
  " noremap <leader>n :NERDTreeToggle<CR>
  let NERDTreeShowBookmarks = 1
  let NERDTreeIgnore = []
  let NERDTreeShowHidden = 1
  let NERDTreeWinSize = 30
  " These prevent accidentally loading files while in the NERDTree panel
  autocmd FileType nerdtree noremap <buffer> <c-left> <nop>
  autocmd FileType nerdtree noremap <buffer> <c-h> <nop>
  autocmd FileType nerdtree noremap <buffer> <c-right> <nop>
  autocmd FileType nerdtree noremap <buffer> <c-l> <nop>

  call neobundle#untap()
endif "}}}


if neobundle#tap('vim-nerdtree-tabs') "{{{
  let g:nerdtree_tabs_open_on_gui_startup = 0
  noremap <leader>n :NERDTreeTabsToggle<CR>

  call neobundle#untap()
endif "}}}


if neobundle#tap('tagbar') "{{{
  nmap <F8> :TagbarToggle<CR>

  call neobundle#untap()
endif "}}}

if neobundle#tap('vim-airline') "{{{
  let g:airline_theme = "base16"
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '◀'

  call neobundle#untap()
endif "}}}

if neobundle#tap('vim-fugitive') "{{{
  nnoremap <leader>git :Git
  nnoremap <leader>gd :Gdiff<cr>
  nnoremap <leader>gs :Gstatus<cr>
  nnoremap <leader>gw :Gwrite<cr>
  nnoremap <leader>ga :Gadd<cr>
  nnoremap <leader>gb :Gblame<cr>
  nnoremap <leader>gco :Gcheckout<cr>
  nnoremap <leader>gci :Gcommit<cr>
  nnoremap <leader>gm :Gmove<cr>
  nnoremap <leader>gr :Gremove<cr>
  nnoremap <leader>gl :Shell git gl -18<cr>:wincmd \|<cr>

  call neobundle#untap()
endif "}}}

if neobundle#tap('vim-gitgutter') "{{{
  let g:gitgutter_enabled = 1

  call neobundle#untap()
endif "}}}

if neobundle#tap('syntastic') "{{{
  let g:syntastic_javascript_checkers = ['jshint']
  let g:syntastic_html_checkers = ['']

  call neobundle#untap()
endif "}}}

if neobundle#tap('unite.vim') "{{{
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  nnoremap <leader>r :<C-u>Unite -start-insert file_rec<CR>
  let g:unite_source_history_yank_enable = 1
  nnoremap <leader>y :<C-u>Unite history/yank<CR>
  nnoremap <silent> <leader>b :<C-u>Unite buffer bookmark<CR>

  call neobundle#untap()
endif "}}}

if neobundle#tap('indentLine') "{{{
  let g:indentLine_faster = 1
  nmap <silent><c-i> :<C-u>IndentLinesToggle<CR>
endif "}}}


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set history=100

" Set to auto read when a file is changed from the outside
set autoread

set clipboard=unnamed

" Fast saving
nmap <leader>w :w!<cr>

" :W sudo saves the file
" (useful for handling the permission-denied error)
" command w!! w !sudo tee % > /dev/null

"if has("autocmd") && exists("+omnifunc")
"autocmd Filetype *
    "\if &omnifunc == "" |
    "\setlocal omnifunc=syntaxcomplete#Complete |
    "\endif
"endif
"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
"autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =>Movement, Tabs, Windows, Buffer
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Treat long lines as break lines
map j gj
map k gk

" go to prev file
map <Leader>p <C-^>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
" Remember info about open buffers on close
set viminfo^=%


" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set so=8

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,*/node_modules/*

" Always show current position
set ruler

set nu

set linespace=3

" Height of cmd line
set cmdheight=2

" A buffer becomes hidden when it is abandoned
" set hid


" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
" set foldcolumn=1

" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Disable left scrollbar
set guioptions-=T
set guioptions-=L
set guioptions-=r
set guitablabel=%M\ %t


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

set background=dark

colorscheme blackboard

set t_Co=256

" highlight current line
set cursorline
highlight CursorLine          guibg=#003853 ctermbg=24  gui=none cterm=none


" draw a shadow range for indicated the 80 cols
let &colorcolumn="80,".join(range(120,999),",")
hi ColorColumn ctermbg=235 guibg=#022036 ctermbg=darkgray

" Set extra options when running in GUI mode
if has("gui_running")
    let macvim_skip_colorscheme=1
    set guifont=Menlo\ Regular:h14
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Invisible characters
set listchars=trail:.,tab:>-,eol:$,extends:#,nbsp:.
" set list
set nolist
:noremap ,i :set list!<CR>

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" awesome, inserts new line without going into insert mode
map <S-Enter> O<ESC>
map <Enter> o<ESC>

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>



"""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction


function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ack \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction






"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fast editing and reloading of vimrc configs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>ev :e! ~/.vimrc<cr>
map <leader>sv :so ~/.vimrc<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Turn persistent undo on
"  means that you can undo even when you close a buffer/VIM
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
    set undodir=~/.vim/temp_dirs/undodir
    set undofile
catch
endtry


" Disable the arrow keys. Orz.
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
